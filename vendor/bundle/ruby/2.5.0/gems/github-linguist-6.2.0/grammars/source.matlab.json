{
  "name": "MATLAB",
  "scopeName": "source.matlab",
  "patterns": [
    {
      "include": "#classdef"
    },
    {
      "include": "#function"
    },
    {
      "include": "#blocks"
    },
    {
      "include": "#control_statements"
    },
    {
      "include": "#global_persistent"
    },
    {
      "include": "#command_dual"
    },
    {
      "include": "#string"
    },
    {
      "include": "#line_continuation"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#transpose"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#end_in_parens"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "blocks": {
      "patterns": [
        {
          "name": "meta.for.matlab",
          "begin": "(^\\s*)(for)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.for-quantity.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.for-quantity.matlab"
            },
            "2": {
              "name": "keyword.control.for.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.for.matlab"
            }
          }
        },
        {
          "name": "meta.if.matlab",
          "begin": "(^\\s*)(if)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.if-condition.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "name": "meta.elseif.matlab",
              "match": "(^\\s*)(elseif)\\b(.*)$\\n?",
              "end": "^",
              "beginCaptures": {
                "0": {
                  "name": "meta.elseif-condition.matlab"
                },
                "2": {
                  "name": "keyword.control.elseif.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "$self"
                    }
                  ]
                }
              }
            },
            {
              "name": "meta.else.matlab",
              "match": "(^\\s*)(else)\\b(.*)?$\\n?",
              "end": "^",
              "beginCaptures": {
                "0": {
                  "name": "meta.else-condition.matlab"
                },
                "2": {
                  "name": "keyword.control.else.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "$self"
                    }
                  ]
                }
              }
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.if-condition.matlab"
            },
            "2": {
              "name": "keyword.control.if.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.if.matlab"
            }
          }
        },
        {
          "name": "meta.parfor.matlab",
          "begin": "(^\\s*)(parfor)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.parfor-quantity.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.parfor-quantity.matlab"
            },
            "2": {
              "name": "keyword.control.for.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.for.matlab"
            }
          }
        },
        {
          "name": "meta.spmd.matlab",
          "begin": "(^\\s*)(spmd)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.spmd-statement.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.spmd-statement.matlab"
            },
            "2": {
              "name": "keyword.control.spmd.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.spmd.matlab"
            }
          }
        },
        {
          "name": "meta.switch.matlab",
          "begin": "(^\\s*)(switch)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.switch-expression.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "name": "meta.case.matlab",
              "match": "(^\\s*)(case)\\b(.*)$\\n?",
              "end": "^",
              "beginCaptures": {
                "0": {
                  "name": "meta.case-expression.matlab"
                },
                "2": {
                  "name": "keyword.control.case.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "$self"
                    }
                  ]
                }
              }
            },
            {
              "name": "meta.otherwise.matlab",
              "match": "(^\\s*)(otherwise)\\b(.*)?$\\n?",
              "end": "^",
              "beginCaptures": {
                "0": {
                  "name": "meta.otherwise-expression.matlab"
                },
                "2": {
                  "name": "keyword.control.otherwise.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "$self"
                    }
                  ]
                }
              }
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.switch-expression.matlab"
            },
            "2": {
              "name": "keyword.control.switch.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.switch.matlab"
            }
          }
        },
        {
          "name": "meta.try.matlab",
          "begin": "(^\\s*)(try)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.catch.matlab",
              "match": "(^\\s*)(catch)\\b(.*)?$\\n?",
              "end": "^",
              "beginCaptures": {
                "0": {
                  "name": "meta.catch-exception.matlab"
                },
                "2": {
                  "name": "keyword.control.catch.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "include": "$self"
                    }
                  ]
                }
              }
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "2": {
              "name": "keyword.control.try.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.try.matlab"
            }
          }
        },
        {
          "name": "meta.while.matlab",
          "begin": "(^\\s*)(while)\\b",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.while-condition.matlab",
              "begin": "\\G(?!$)",
              "end": "$\\n?",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "meta.while-condition.matlab"
            },
            "2": {
              "name": "keyword.control.while.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.while.matlab"
            }
          }
        }
      ]
    },
    "classdef": {
      "patterns": [
        {
          "name": "meta.class.matlab",
          "begin": "(?x)\n\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t(classdef)\n\t\t\t\t\t\t\t\\b\\s*\n\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\n\t\t\t\t\t\t\t\t\\( [^)]* \\)\n\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t([a-zA-Z][a-zA-Z0-9_]*)\t\t\t# Class name\n\t\t\t\t\t\t\t\t(?:\t\t\t\t\t\t\t\t# Optional inheritance\n\t\t\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t\t\t(\u003c)\n\t\t\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t\t\t([^%]*)\n\t\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\\s*($|(?=%))\n\t\t\t\t\t\t",
          "end": "^\\s*(end)\\b",
          "patterns": [
            {
              "name": "meta.properties.matlab",
              "begin": "(?x)\n\t\t\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t\t\t(properties)\\b(.*)$\n\t\t\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\n\t\t\t\t\t\t\t\t\t\t\\( [^)]* \\)\n\t\t\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t\t\t\\s*($|(?=%))\n\t\t\t\t\t\t\t\t",
              "end": "^\\s*(end)\\b",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "beginCaptures": {
                "2": {
                  "name": "keyword.control.properties.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "name": "variable.parameter.properties.matlab",
                      "match": "[a-zA-Z][a-zA-Z0-9_]*"
                    },
                    {
                      "begin": "=\\s*",
                      "end": ",|(?=\\))",
                      "patterns": [
                        {
                          "name": "constant.language.boolean.matlab",
                          "match": "true|false"
                        },
                        {
                          "name": "constant.language.access.matlab",
                          "match": "public|protected|private"
                        }
                      ]
                    }
                  ]
                }
              },
              "endCaptures": {
                "1": {
                  "name": "keyword.control.end.properties.matlab"
                }
              }
            },
            {
              "name": "meta.methods.matlab",
              "begin": "(?x)\n\t\t\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t\t\t(methods)\\b(.*)$\n\t\t\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\n\t\t\t\t\t\t\t\t\t\t\\( [^)]* \\)\n\t\t\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t\t\t\\s*($|(?=%))\n\t\t\t\t\t\t\t\t",
              "end": "^\\s*(end)\\b",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "beginCaptures": {
                "2": {
                  "name": "keyword.control.methods.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "name": "variable.parameter.methods.matlab",
                      "match": "[a-zA-Z][a-zA-Z0-9_]*"
                    },
                    {
                      "begin": "=\\s*",
                      "end": ",|(?=\\))",
                      "patterns": [
                        {
                          "name": "constant.language.boolean.matlab",
                          "match": "true|false"
                        },
                        {
                          "name": "constant.language.access.matlab",
                          "match": "public|protected|private"
                        }
                      ]
                    }
                  ]
                }
              },
              "endCaptures": {
                "1": {
                  "name": "keyword.control.end.methods.matlab"
                }
              }
            },
            {
              "name": "meta.events.matlab",
              "begin": "(?x)\n\t\t\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t\t\t(events)\\b(.*)$\n\t\t\t\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\n\t\t\t\t\t\t\t\t\t\t\\( [^)]* \\)\n\t\t\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t\t\t\\s*($|(?=%))\n\t\t\t\t\t\t\t\t",
              "end": "^\\s*(end)\\b",
              "beginCaptures": {
                "2": {
                  "name": "keyword.control.events.matlab"
                },
                "3": {
                  "patterns": [
                    {
                      "name": "variable.parameter.events.matlab",
                      "match": "[a-zA-Z][a-zA-Z0-9_]*"
                    },
                    {
                      "begin": "=\\s*",
                      "end": ",|(?=\\))",
                      "patterns": [
                        {
                          "name": "constant.language.boolean.matlab",
                          "match": "true|false"
                        },
                        {
                          "name": "constant.language.access.matlab",
                          "match": "public|protected|private"
                        }
                      ]
                    }
                  ]
                }
              },
              "endCaptures": {
                "1": {
                  "name": "keyword.control.end.events.matlab"
                }
              }
            },
            {
              "name": "meta.enumeration.matlab",
              "begin": "(?x)\n\t\t\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t\t\t(enumeration)\\b(.*)$\n\t\t\t\t\t\t\t\t\t\\s*($|(?=%))\n\t\t\t\t\t\t\t\t",
              "end": "^\\s*(end)\\b",
              "beginCaptures": {
                "2": {
                  "name": "keyword.control.enumeration.matlab"
                }
              },
              "endCaptures": {
                "1": {
                  "name": "keyword.control.end.enumeration.matlab"
                }
              }
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "2": {
              "name": "storage.type.class.matlab"
            },
            "3": {
              "patterns": [
                {
                  "name": "variable.parameter.class.matlab",
                  "match": "[a-zA-Z][a-zA-Z0-9_]*"
                },
                {
                  "begin": "=\\s*",
                  "end": ",|(?=\\))",
                  "patterns": [
                    {
                      "name": "constant.language.boolean.matlab",
                      "match": "true|false"
                    },
                    {
                      "include": "#string"
                    }
                  ]
                }
              ]
            },
            "4": {
              "name": "meta.class-declaration.matlab"
            },
            "5": {
              "name": "entity.name.section.class.matlab"
            },
            "6": {
              "name": "keyword.operator.other.matlab"
            },
            "7": {
              "patterns": [
                {
                  "name": "entity.other.inherited-class.matlab",
                  "match": "[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)*"
                },
                {
                  "name": "keyword.operator.other.matlab",
                  "match": "\u0026"
                }
              ]
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.class.matlab"
            }
          }
        }
      ]
    },
    "command_dual": {
      "match": "^\\s*((?# A\u003e )([b-df-hk-moq-zA-HJ-MO-Z]\\w*|a|an|a([A-Za-mo-z0-9_]\\w*|n[A-Za-rt-z0-9_]\\w*|ns\\w+)|e|ep|e([A-Za-oq-z0-9_]\\w*|p[A-Za-rt-z0-9_]\\w*|ps\\w+)|in|i([A-Za-mo-z0-9_]\\w*|n[A-Za-eg-z0-9_]\\w*|nf\\w+)|I|In|I([A-Za-mo-z0-9_]\\w*|n[A-Za-eg-z0-9_]\\w*|nf\\w+)|j\\w+|N|Na|N([A-Zb-z0-9_]\\w*|a[A-MO-Za-z0-9_]\\w*|aN\\w+)|n|na|nar|narg|nargi|nargo|nargou|n([A-Zb-z0-9_]\\w*|a([A-Za-mo-qs-z0-9_]\\w*|n\\w+|r([A-Za-fh-z0-9_]\\w*|g([A-Za-hj-nq-z0-9_]\\w*|i([A-Za-mo-z0-9_]\\w*|n\\w+)|o([A-Za-tv-z0-9_]\\w*|u([A-Za-su-z]\\w*|t\\w+))))))|p|p[A-Za-hj-z0-9_]\\w*|pi\\w+)(?# \u003cA )\\s+(((?# B\u003e )([^\\s;,%()=.{\u0026|~\u003c\u003e:+\\-*/\\\\@^'\"]|(?=')|(?=\"))(?# \u003cB )|(?# C\u003e )(\\.\\^|\\.\\*|\\./|\\.\\\\|\\.'|\\.\\(|\u0026\u0026|==|\\|\\||\u0026(?=[^\u0026])|\\|(?=[^\\|])|~=|\u003c=|\u003e=|~(?!=)|\u003c(?!=)|\u003e(?!=)|:|\\+|-|\\*|/|\\\\|@|\\^)(?# \u003cC )(?# D\u003e )([^\\s]|\\s*(?=%)|\\s+$|\\s+(,|;|\\)|}|\\]|\u0026|\\||\u003c|\u003e|=|:|\\*|/|\\\\|\\^|@|(\\.[^\\d.]|\\.\\.[^.])))(?# \u003cD )|(?# E\u003e )(\\.[^^*/\\\\'(\\sA-Za-z])(?# \u003cE ))(?# F\u003e )([^%]|'[^']*'|\"[^\"]*\")*(?# \u003cF )|(?# X\u003e )(\\.(?=\\s)|\\.[A-Za-z]|(?={))(?# \u003cX )(?# Y\u003e )([^(=\\'\"%]|==|'[^']*'|\"[^\"]*\"|\\(|\\([^)%]*\\)|\\[|\\[[^\\]%]*\\]|{|{[^}%]*})*(\\.\\.\\.[^%]*)?((?=%)|$)(?# \u003cY )))(%.*)?$",
      "captures": {
        "1": {
          "name": "string.interpolated.matlab"
        },
        "2": {
          "name": "variable.other.command.matlab"
        },
        "28": {
          "name": "comment.line.percentage.matlab"
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=%%)",
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-percentage.matlab",
              "begin": "%%",
              "end": "\\n",
              "patterns": [
                {
                  "contentName": "meta.cell.matlab",
                  "begin": "\\G\\s*(?![\\n\\s])",
                  "end": "(?=\\n)"
                }
              ],
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.matlab"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.matlab"
            }
          }
        },
        {
          "name": "comment.block.percentage.matlab",
          "begin": "^\\s*%\\{\\s*$",
          "end": "^\\s*%\\}\\s*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.matlab"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?(?=%)",
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.percentage.matlab",
              "begin": "%",
              "end": "\\n",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.matlab"
                }
              }
            }
          ],
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.matlab"
            }
          }
        }
      ]
    },
    "constants": {
      "name": "constant.language.matlab",
      "match": "(?\u003c!\\.)\\b(eps|false|Inf|inf|intmax|intmin|namelengthmax|NaN|nan|on|off|realmax|realmin|true|pi)\\b"
    },
    "control_statements": {
      "name": "meta.control.matlab",
      "match": "^\\s*(break|continue|return)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.matlab"
        }
      }
    },
    "end_in_parens": {
      "name": "keyword.operator.symbols.matlab",
      "match": "\\bend\\b"
    },
    "function": {
      "patterns": [
        {
          "name": "meta.function.matlab",
          "begin": "(?x)\n\t\t\t\t\t\t\t(^\\s*)\t\t\t\t\t\t\t\t\t\t\t\t# Leading whitespace\n\t\t\t\t\t\t\t(function)\n\t\t\t\t\t\t\t\\s+\n\t\t\t\t\t\t\t(?:\t\t\t\t\t\t\t\t\t\t\t\t\t# Optional\n\t\t\t\t\t\t\t\t(?:\n\t\t\t\t\t\t\t\t\t(\\[) ([^\\]]*) (\\])\n\t\t\t\t\t\t\t\t  | ([a-zA-Z][a-zA-Z0-9_]*)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\\s* = \\s*\n\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t([a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)*)\t# Function name\n\t\t\t\t\t\t\t\\s*\t\t\t\t\t\t\t\t\t\t\t\t\t# Trailing space\n\t\t\t\t\t\t",
          "end": "^\\s*(end)\\b(\\s*\\n)?",
          "patterns": [
            {
              "name": "meta.arguments.function.matlab",
              "begin": "\\G\\(",
              "end": "\\)",
              "patterns": [
                {
                  "name": "variable.parameter.input.matlab",
                  "match": "\\w+"
                }
              ]
            },
            {
              "include": "$self"
            }
          ],
          "beginCaptures": {
            "2": {
              "name": "storage.type.function.matlab"
            },
            "3": {
              "name": "punctuation.definition.arguments.begin.matlab"
            },
            "4": {
              "patterns": [
                {
                  "name": "variable.parameter.output.matlab",
                  "match": "\\w+"
                }
              ]
            },
            "5": {
              "name": "punctuation.definition.arguments.end.matlab"
            },
            "6": {
              "name": "variable.parameter.output.function.matlab"
            },
            "7": {
              "name": "entity.name.function.matlab"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.function.matlab"
            }
          }
        }
      ]
    },
    "global_persistent": {
      "name": "meta.globalpersistent.matlab",
      "match": "^\\s*(global|persistent)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.globalpersistent.matlab"
        }
      }
    },
    "line_continuation": {
      "name": "meta.linecontinuation.matlab",
      "match": "(\\.\\.\\.)(.*)$",
      "captures": {
        "1": {
          "name": "keyword.operator.symbols.matlab"
        },
        "2": {
          "name": "comment.line.continuation.matlab"
        }
      }
    },
    "numbers": {
      "name": "constant.numeric.matlab",
      "match": "(?\u003c=[\\s\\-\\+\\*\\/\\\\=:\\[\\(\\{,]|^)\\d*\\.?\\d+([eE][+-]?\\d)?([0-9\u0026\u0026[^\\.]])*(i|j)?\\b"
    },
    "operators": {
      "name": "keyword.operator.symbols.matlab",
      "match": "(?\u003c=\\s)(==|~=|\u003e|\u003e=|\u003c|\u003c=|\u0026|\u0026\u0026|:|\\||\\|\\||\\+|-|\\*|\\.\\*|/|\\./|\\\\|\\.\\\\|\\^|\\.\\^)(?=\\s)"
    },
    "string": {
      "patterns": [
        {
          "match": "^\\s*((!).*$\\n?)",
          "captures": {
            "1": {
              "name": "string.interpolated.matlab"
            },
            "2": {
              "name": "punctuation.definition.string.begin.matlab"
            }
          }
        },
        {
          "name": "string.quoted.single.matlab",
          "begin": "((?\u003c=(\\[|\\(|\\{|=|\\s|;|:|,|~|\u003c|\u003e|\u0026|\\||-|\\+|\\*|/|\\\\|\\.|\\^))|^)'",
          "end": "'(?=(\\[|\\(|\\{|\\]|\\)|\\}|=|~|\u003c|\u003e|\u0026|\\||-|\\+|\\*|/|\\\\|\\.|\\^|\\s|;|:|,))",
          "patterns": [
            {
              "name": "constant.character.escape.matlab",
              "match": "''"
            },
            {
              "name": "invalid.illegal.unescaped-quote.matlab",
              "match": "'(?=.)"
            },
            {
              "name": "constant.character.escape.matlab",
              "match": "((\\%([\\+\\-0]?\\d{0,3}(\\.\\d{1,3})?)(c|d|e|E|f|g|G|s|((b|t)?(o|u|x|X))))|\\%\\%|\\\\(b|f|n|r|t|\\\\))"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.matlab"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.matlab"
            }
          }
        },
        {
          "name": "string.quoted.double.matlab",
          "begin": "((?\u003c=(\\[|\\(|\\{|=|\\s|;|:|,|~|\u003c|\u003e|\u0026|\\||-|\\+|\\*|/|\\\\|\\.|\\^))|^)\"",
          "end": "\"(?=(\\[|\\(|\\{|\\]|\\)|\\}|=|~|\u003c|\u003e|\u0026|\\||-|\\+|\\*|/|\\\\|\\.|\\^|\\||\\s|;|:|,))",
          "patterns": [
            {
              "name": "constant.character.escape.matlab",
              "match": "\"\""
            },
            {
              "name": "invalid.illegal.unescaped-quote.matlab",
              "match": "\"(?=.)"
            }
          ],
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.matlab"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.matlab"
            }
          }
        }
      ]
    },
    "transpose": {
      "name": "keyword.operator.transpose.matlab",
      "match": "((\\w+)|(?\u003c=\\])|(?\u003c=\\)))\\.?'"
    },
    "variables": {
      "name": "variable.other.function.matlab",
      "match": "(?\u003c!\\.)\\b(nargin|nargout|varargin|varargout)\\b"
    }
  }
}
